{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      // ---------------- here we are allowed to mutate the existing state\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter += action.payload;\n      // ----- any kind of data can be passed to counterActions.increase() and this value will be stored as key value paired where key is called palyload\n    },\n    toogleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// counterSlice.actions.toogleCounter()\n// ----------- returns an action object of shape: {type: 'some auto-generated unique identifier}\n\n// ----------- OLD COUNTER REDUCER\n\n// function counterReducer(state=initialState, action) {\n\n//     if(action.type === 'increment') \n//         // never change/mutate the existing state\n//         // always return new object\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n\n//     if(action.type === 'increase')\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//     }\n//     if(action.type === 'decrement') \n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     if(action.type === 'toggleCounter')\n//         return{\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     return state;\n// }\n\n// const store = createStore(counterSlice.reducer);\n\n// ----------- configureStore function makes multiple reducer merge easily\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["createStore","createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toogleCounter","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"sources":["D:/Desktop(9-4-2024)/React Tutorials/ReduxBasics/Project/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux';\r\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\r\n\r\nconst initialCounterState = {counter: 0, showCounter: true}\r\n\r\nconst counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: initialCounterState,\r\n    reducers: {\r\n        increment(state) {\r\n            // ---------------- here we are allowed to mutate the existing state\r\n            state.counter++;\r\n        },\r\n        decrement(state) {\r\n            state.counter--;\r\n        },\r\n        increase(state, action){\r\n            state.counter += action.payload;\r\n            // ----- any kind of data can be passed to counterActions.increase() and this value will be stored as key value paired where key is called palyload\r\n        },\r\n        toogleCounter(state) {\r\n            state.showCounter = !state.showCounter;\r\n        }\r\n    }\r\n});\r\n\r\nconst initialAuthState = {isAuthenticated: false}\r\nconst authSlice = createSlice({\r\n    name: 'authentication',\r\n    initialState: initialAuthState,\r\n    reducers: {\r\n        login(state) {\r\n            state.isAuthenticated = true;\r\n        },\r\n        logout(state) {\r\n            state.isAuthenticated = false;\r\n        }\r\n    }\r\n});\r\n\r\n// counterSlice.actions.toogleCounter()\r\n// ----------- returns an action object of shape: {type: 'some auto-generated unique identifier}\r\n\r\n// ----------- OLD COUNTER REDUCER\r\n\r\n// function counterReducer(state=initialState, action) {\r\n\r\n//     if(action.type === 'increment') \r\n//         // never change/mutate the existing state\r\n//         // always return new object\r\n//         return {\r\n//             counter: state.counter + 1,\r\n//             showCounter: state.showCounter\r\n//         }\r\n\r\n//     if(action.type === 'increase')\r\n//         return {\r\n//             counter: state.counter + action.amount,\r\n//             showCounter: state.showCounter\r\n//     }\r\n//     if(action.type === 'decrement') \r\n//         return {\r\n//             counter: state.counter - 1,\r\n//             showCounter: state.showCounter\r\n//         }\r\n//     if(action.type === 'toggleCounter')\r\n//         return{\r\n//             showCounter: !state.showCounter,\r\n//             counter: state.counter\r\n//         }\r\n//     return state;\r\n// }\r\n\r\n// const store = createStore(counterSlice.reducer);\r\n\r\n// ----------- configureStore function makes multiple reducer merge easily\r\nconst store = configureStore( {\r\n    reducer: { counter: counterSlice.reducer, auth: authSlice.reducer }\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\nexport const authActions = authSlice.actions;\r\nexport default store;"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AACjC,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EAACC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAI,CAAC;AAE3D,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAE;MACb;MACAA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDQ,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDS,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAC;MACnBH,KAAK,CAACP,OAAO,IAAIU,MAAM,CAACC,OAAO;MAC/B;IACJ,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACjBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMY,gBAAgB,GAAG;EAACC,eAAe,EAAE;AAAK,CAAC;AACjD,MAAMC,SAAS,GAAGlB,WAAW,CAAC;EAC1BM,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAAES,gBAAgB;EAC9BR,QAAQ,EAAE;IACNW,KAAKA,CAACT,KAAK,EAAE;MACTA,KAAK,CAACO,eAAe,GAAG,IAAI;IAChC,CAAC;IACDG,MAAMA,CAACV,KAAK,EAAE;MACVA,KAAK,CAACO,eAAe,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,MAAMI,KAAK,GAAGpB,cAAc,CAAE;EAC1BqB,OAAO,EAAE;IAAEnB,OAAO,EAAEE,YAAY,CAACiB,OAAO;IAAEC,IAAI,EAAEL,SAAS,CAACI;EAAQ;AACtE,CAAC,CAAC;AAEF,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAAO;AAC5C,eAAeJ,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}