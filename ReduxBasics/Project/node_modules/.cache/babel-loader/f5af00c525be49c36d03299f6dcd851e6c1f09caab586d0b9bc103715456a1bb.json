{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment(state) {\n      // ---------------- here we are allowed to mutate the existing state\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter += action.amount;\n    },\n    toogleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// counterSlice.actions.toogleCounter()\n// ----------- returns an action object of shape: {type: 'some auto-generated unique identifier}\n\n// ----------- OLD COUNTER REDUCER\n\n// function counterReducer(state=initialState, action) {\n\n//     if(action.type === 'increment') \n//         // never change/mutate the existing state\n//         // always return new object\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n\n//     if(action.type === 'increase')\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//     }\n//     if(action.type === 'decrement') \n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     if(action.type === 'toggleCounter')\n//         return{\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     return state;\n// }\n\n// const store = createStore(counterSlice.reducer);\n\n// ----------- configureStore function makes multiple reducer merge easily\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createStore","createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toogleCounter","store","reducer","counterActions","actions"],"sources":["D:/Desktop(9-4-2024)/React Tutorials/ReduxBasics/Project/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux';\r\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {counter: 0, showCounter: true}\r\n\r\nconst counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState,\r\n    reducers: {\r\n        increment(state) {\r\n            // ---------------- here we are allowed to mutate the existing state\r\n            state.counter++;\r\n        },\r\n        decrement(state) {\r\n            state.counter--;\r\n        },\r\n        increase(state, action){\r\n            state.counter += action.amount;\r\n        },\r\n        toogleCounter(state) {\r\n            state.showCounter = !state.showCounter;\r\n        }\r\n    }\r\n});\r\n\r\n// counterSlice.actions.toogleCounter()\r\n// ----------- returns an action object of shape: {type: 'some auto-generated unique identifier}\r\n\r\n// ----------- OLD COUNTER REDUCER\r\n\r\n// function counterReducer(state=initialState, action) {\r\n\r\n//     if(action.type === 'increment') \r\n//         // never change/mutate the existing state\r\n//         // always return new object\r\n//         return {\r\n//             counter: state.counter + 1,\r\n//             showCounter: state.showCounter\r\n//         }\r\n\r\n//     if(action.type === 'increase')\r\n//         return {\r\n//             counter: state.counter + action.amount,\r\n//             showCounter: state.showCounter\r\n//     }\r\n//     if(action.type === 'decrement') \r\n//         return {\r\n//             counter: state.counter - 1,\r\n//             showCounter: state.showCounter\r\n//         }\r\n//     if(action.type === 'toggleCounter')\r\n//         return{\r\n//             showCounter: !state.showCounter,\r\n//             counter: state.counter\r\n//         }\r\n//     return state;\r\n// }\r\n\r\n// const store = createStore(counterSlice.reducer);\r\n\r\n// ----------- configureStore function makes multiple reducer merge easily\r\nconst store = configureStore( {\r\n    reducer: counterSlice.reducer\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\nexport default store;"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AACjC,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,YAAY,GAAG;EAACC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAI,CAAC;AAEpD,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAE;MACb;MACAA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAC;MACnBH,KAAK,CAACN,OAAO,IAAIS,MAAM,CAACC,MAAM;IAClC,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACjBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,MAAMW,KAAK,GAAGd,cAAc,CAAE;EAC1Be,OAAO,EAAEX,YAAY,CAACW;AAC1B,CAAC,CAAC;AAEF,OAAO,MAAMC,cAAc,GAAGZ,YAAY,CAACa,OAAO;AAClD,eAAeH,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}