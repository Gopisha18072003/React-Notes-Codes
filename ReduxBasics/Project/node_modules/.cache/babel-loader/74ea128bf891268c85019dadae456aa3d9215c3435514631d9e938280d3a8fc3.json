{"ast":null,"code":"import { createStore } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport counterSliceReducer from './counter-slice';\nimport authSliceReducer from './auth-slice';\n\n// counterSlice.actions.toogleCounter()\n// ----------- returns an action object of shape: {type: 'some auto-generated unique identifier}\n\n// ----------- OLD COUNTER REDUCER\n\n// function counterReducer(state=initialState, action) {\n\n//     if(action.type === 'increment') \n//         // never change/mutate the existing state\n//         // always return new object\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n\n//     if(action.type === 'increase')\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//     }\n//     if(action.type === 'decrement') \n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     if(action.type === 'toggleCounter')\n//         return{\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     return state;\n// }\n\n// const store = createStore(counterSlice.reducer);\n\n// ----------- configureStore function makes multiple reducer merge easily\nconst store = configureStore({\n  reducer: {\n    counter: counterSliceReducer,\n    auth: authSliceReducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["createStore","configureStore","counterSliceReducer","authSliceReducer","store","reducer","counter","auth","counterActions","counterSlice","actions","authActions","authSlice"],"sources":["D:/Desktop(9-4-2024)/React Tutorials/ReduxBasics/Project/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux';\r\nimport {configureStore } from '@reduxjs/toolkit';\r\n\r\nimport counterSliceReducer from './counter-slice';\r\nimport authSliceReducer from './auth-slice';\r\n\r\n\r\n// counterSlice.actions.toogleCounter()\r\n// ----------- returns an action object of shape: {type: 'some auto-generated unique identifier}\r\n\r\n// ----------- OLD COUNTER REDUCER\r\n\r\n// function counterReducer(state=initialState, action) {\r\n\r\n//     if(action.type === 'increment') \r\n//         // never change/mutate the existing state\r\n//         // always return new object\r\n//         return {\r\n//             counter: state.counter + 1,\r\n//             showCounter: state.showCounter\r\n//         }\r\n\r\n//     if(action.type === 'increase')\r\n//         return {\r\n//             counter: state.counter + action.amount,\r\n//             showCounter: state.showCounter\r\n//     }\r\n//     if(action.type === 'decrement') \r\n//         return {\r\n//             counter: state.counter - 1,\r\n//             showCounter: state.showCounter\r\n//         }\r\n//     if(action.type === 'toggleCounter')\r\n//         return{\r\n//             showCounter: !state.showCounter,\r\n//             counter: state.counter\r\n//         }\r\n//     return state;\r\n// }\r\n\r\n// const store = createStore(counterSlice.reducer);\r\n\r\n// ----------- configureStore function makes multiple reducer merge easily\r\nconst store = configureStore( {\r\n    reducer: { counter: counterSliceReducer, auth: authSliceReducer }\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\nexport const authActions = authSlice.actions;\r\nexport default store;"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AACjC,SAAQC,cAAc,QAAQ,kBAAkB;AAEhD,OAAOC,mBAAmB,MAAM,iBAAiB;AACjD,OAAOC,gBAAgB,MAAM,cAAc;;AAG3C;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,MAAMC,KAAK,GAAGH,cAAc,CAAE;EAC1BI,OAAO,EAAE;IAAEC,OAAO,EAAEJ,mBAAmB;IAAEK,IAAI,EAAEJ;EAAiB;AACpE,CAAC,CAAC;AAEF,OAAO,MAAMK,cAAc,GAAGC,YAAY,CAACC,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGC,SAAS,CAACF,OAAO;AAC5C,eAAeN,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}